package org.javers.spring.boot

import org.javers.core.Javers
import org.javers.spring.boot.sql.DummyEntityRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.transaction.annotation.Transactional
import spock.lang.Specification

import static org.javers.repository.jql.QueryBuilder.byInstanceId

abstract class SpringBootAuditableIntegrationBaseTest extends Specification {

    @Autowired
    Javers javers

    @Autowired
    DummyEntityRepository dummyEntityRepository

    @Autowired
    EmployeeRepository employeeRepository

    @Autowired
    EmployeeRepositoryWithJavers employeeRepositoryWithJavers

    @Transactional
    def "@JaversSpringDataAuditable aspect should work effortlessly with spring-boot"() {
        when:
        def o = DummyEntity.random()

        def savedEntity1 = dummyEntityRepository.save(o)
        // Since we have id as generated value, the id would again be generated by hibernate
        // to ensure that hibernate should not generate id
        assert(savedEntity1.id != o.id);
        assert(dummyEntityRepository.findOne(o.id) == null);
        assert(dummyEntityRepository.findOne(savedEntity1.id) != null);
        savedEntity1.name = "a"
        dummyEntityRepository.saveAndFlush(savedEntity1)

        o = DummyEntity.random();
        def savedEntity2 = dummyEntityRepository.save(o)
        assert(savedEntity2.id != o.id);
        savedEntity2.name = "a"
        dummyEntityRepository.saveAndFlush(savedEntity2)

        then:
        javers.findSnapshots(byInstanceId(savedEntity1.id, DummyEntity).build()).size() == 2
        javers.findSnapshots(byInstanceId(savedEntity2.id, DummyEntity).build()).size() == 2
    }

    def "@JaversSpringDataAuditable aspect should work when Ids are generated by Hibernate"() {
        given: "generating Ids and persistence is fine"
        def employee = createEmployee()
        employee.id == null
        employee.getDepartment().id == null
        def freshEmployee = employeeRepository.save(employee)
        println(freshEmployee)

        when:
        def jEmployee = createEmployee()
        def jFreshEmployee = employeeRepositoryWithJavers.save(jEmployee)
        println(jFreshEmployee)

        then:
        javers.findSnapshots(byInstanceId(jFreshEmployee.id, EmployeeEntity).build()).size() == 1
        javers.findSnapshots(byInstanceId(jFreshEmployee.department.id, DepartmentEntity).build()).size() == 1
    }

    EmployeeEntity createEmployee() {
        DepartmentEntity departmentEntity = new DepartmentEntity()
        EmployeeEntity employeeEntity = new EmployeeEntity()
        employeeEntity.setId(UUID.randomUUID())
        employeeEntity.setDepartment(departmentEntity)
        employeeEntity
    }
}